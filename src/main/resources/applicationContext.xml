<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="  
     http://www.springframework.org/schema/beans   
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
     http://www.springframework.org/schema/tx   
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
     http://www.springframework.org/schema/aop   
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
     http://www.springframework.org/schema/context  
     http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/task  
	 http://www.springframework.org/schema/task/spring-task-3.0.xsd 
     ">

	
	<context:property-placeholder location="classpath:config.properties" />
	
	<!-- 配置Spring定时任务-->
	<task:executor id="executor" pool-size="5"/>
	<task:scheduler id="schedular" pool-size="10"/>
	<task:annotation-driven executor="executor" scheduler="schedular"/>
	
	
	<context:annotation-config />
	<context:component-scan base-package="com.sdudoc" />

	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="${maxActive}" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}" />
		<!-- 获取连接的最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- 用于验证连接是否成功的查询SQL语句，SQL语句必须至少要返回一行数据 -->
		<!-- <property name="validationQuery" value="select count(*) from xxx"/> -->
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<!-- <property name="timeBetweenEvictionRunsMillis" value="60000"/> -->
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<!-- <property name="minEvictableIdleTimeMillis" value="25200000" /> -->
		<!-- 打开removeAbandoned功能,是否自我中断 -->
		<!-- <property name="removeAbandoned" value="true" /> -->
		<!-- 1800秒，也就是30分钟,几秒后数据连接会自动断开，在removeAbandoned为true，提供该值 -->
		<!-- <property name="removeAbandonedTimeout" value="1800" /> -->
		<!-- 关闭abanded连接时输出错误日志 -->
		<!-- <property name="logAbandoned" value="true" /> -->
	</bean>

	<!-- 配置hibernate session工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!-- 是否自动更新表项目 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- 数据库使用的方言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<!-- 是否显示产生的sql语句 -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 是否显示格式化产生的sql语句 -->
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>

		<!-- 自动扫描注解方式配置的hibernate类文件 -->
		<property name="packagesToScan">
			<list>
				<value>com.sdudoc.bean</value>
			</list>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>

	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 表示使用CGLib动态代理技术织入增强 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 配置参与事务的类和方法 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.sdudoc.service.impl.*.*(..))"
			id="allServiceMethod" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allServiceMethod" />
	</aop:config>

	<!-- 使用Spring AOP进行日志操作 -->
	<!-- <aop:config>
			 <aop:aspect ref="logAspect">
			 	<aop:pointcut id="logPointCut" expression="execution(* com.sdudoc.action.*.*(..))" /> 
			 	<aop:after-returning pointcut-ref="logPointCut" method="doSysLogAfter" /> 
			 </aop:aspect>
		</aop:config> 
	-->

	<!-- 异步线程池 配置线程池，用于异步发送 邮件 -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="50" />
		<!-- 队列最大长度 >=mainExecutor.maxSize -->
		<property name="queueCapacity" value="1000" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="300" />
		<!-- 线程池对拒绝任务(无线程可用)的处理策略 -->
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>

	<!-- 使用quartz执行定时任务，这里进行了简单的配置，初步可以使用，在本项目中使用Spring Task来替代， -->
	<!-- 使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法 -->
	<!-- <bean id="taskJob" class="com.sdudoc.task.QuartzTask" /> -->
	<!-- <bean id="jobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="group" value="job_work" />
		<property name="name" value="job_work_name" />
		false表示等上一个任务执行完后再开启新的任务
		<property name="concurrent" value="false" />
		<property name="targetObject">
			<ref bean="taskJob" />
		</property>
		<property name="targetMethod">
			<value>run</value>
		</property>
	</bean> -->

	<!-- 调度触发器 -->
	<!-- <bean id="myTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="name" value="work_default_name" />
		<property name="group" value="work_default" />
		<property name="jobDetail">
			<ref bean="jobDetail" />
		</property>
		<property name="cronExpression">
			<value>0/20 * * * * ?</value>
		</property>
	</bean> -->

	<!-- 调度工厂 -->
	<!-- <bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="myTrigger" />
			</list>
		</property>
	</bean> -->


</beans> 